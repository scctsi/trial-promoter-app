.ui.buttons
  -if @experiment.disable_message_generation?
    .disabled.button
      %a.ui.labeled.icon.button.disable-message-generation-button
        %i.send.icon
        Generate messages
    .or
    %a.ui.labeled.icon.button{ href: "/experiments/#{@experiment.id}/send_to_buffer" }
      %i.rocket.icon
      Send to Buffer
  -else
    %a#generate-messages-button.ui.primary.labeled.icon.button{:href => "/experiments/#{@experiment.id}/create_messages.html", 'data-experiment-id' => @experiment.id}
      %i.send.icon
      Generate messages
    .or
    %a.ui.labeled.icon.button{ href: "/experiments/#{@experiment.id}/send_to_buffer" }
      %i.rocket.icon
      Send to Buffer
-if @experiment.message_distribution_start_date.nil?
  .ui.negative.message
    .header
      Please enter the message generation start date
- if @messages.count == 0
  .ui.message
    .header
    %p When you have set up the message generation parameters and imported all required information, you are ready to generate the messages for the experiment.
- else
  .ui.message
    .header
      Note
    %ul.list
      %li Randomization: The messages are assigned to a random sequence using a random sequence generator (Ref, year). The selection of the hashtag (if applicable) and the images is randomized as well using ADD technique name (Ref, year).
      %li Message generation: All existing messages for an experiment are deleted each time the messages are re-generated (by clicking on the “Generate messages” button).
      %li Editing restriction: Set up, message templates, and generation will be locked 3 days before the experiment is scheduled to start.
      %li Send to Buffer: Trial Promoter sends messages to Buffer nightly (up to a week in advance). Please use this button to immediately send the messages scheduled for the next 7 days to Buffer.
  = render partial: 'shared/messages', locals: { messages: @messages }
= render partial: 'message_generation_progress_modal', locals: { total: @experiment.message_generation_parameter_set.expected_generated_message_count(MessageTemplate.belonging_to(@experiment).count) }